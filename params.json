{
  "name": "Networkprogramming",
  "tagline": "ExamplesOfJavaNetWorkProgramming",
  "body": "# 网络编程技术\r\n\r\n标签（空格分隔）： java\r\n\r\n---\r\n[TOC]\r\n\r\n## 一.网络通信基础\r\n基本知识包括网络通信中的通信协议，IP地址，端口号，TCP协议，UDP协议以及网络程序设计的基本框架。\r\n### 1.基本概念\r\n\r\n**计算机网络：**\r\n\r\n> 指通过各种通信设备连接起来的，支持特定网络通信协议的，许许多多的计算机通信或计算机系统的集合\r\n\r\n**网络通信：**\r\n\r\n> 指网络中的计算机通过网络互相传递信息\r\n\r\n**通信协议：**\r\n\r\n> 是网络通信的基础，是网络中计算机之间进行通信时共同遵守的规则。不同的通信协议用不同的方法解决不同类型的通信问题。\r\n\r\n为了实现网络上不同机器之间的通信，必须知道对方主机的地址和端口号\r\n\r\n\r\n\r\n\r\n#### a.IP地址\r\nIP地址是计算机网络中任意一台计算机地址的唯一标识符，知道了网络中某一主机的IP地址，就可以定位这一台计算机。IPv4 32位，IPv6 128位。\r\n\r\n#### b.域名地址\r\n这个就是主机的IP地址用纯数字表示的话不容易记忆，于是在IP地址上加上一个容易记忆的域名，网络中的域名解析器会将域名解析为IP地址。\r\n#### c.端口号\r\n主机上有多个进程，这些进程都可以和其他计算机进行通信，准确的说，计算机之间的通信其实就是进程与进程之间的通信。主机名和端口的组合能唯一确定网络通信的主体----进程。而端口是网络通信过程中不同进程的唯一标识。\r\n\r\n### 2.通信协议\r\nTCP和UDP是两种在网络通信中使用最多的通信协议。\r\n\r\n#### a.TCP（Transfer Control Protocol)协议\r\n**是一种面向连接的，可以提供可靠传输的通信协议**，意思就是TCP就是打电话，先要哦把电话拨通建立连接，然后可以肆无忌惮的谈话（传输信息），可靠性体现在对面发什么，我就接收什么。还是可以用电话类比。\r\n#### b.UDP(User Datagram Protocol)协议\r\nUDP是一种无连接的协议，传输的是一种独立的数据报。每个数据报都是独立的信息，包括完整的源地址和目的地址。UDP是有大小限制的，最大64kb.因此数据可以划分为多个数据报，每个数据报都有源地址和目的地址，假设数据报的目的地址都相同，因此每个数据报的路径可以不同。\r\n#### c.两种协议的比较\r\n\r\n 1. UDP无连接，TCP必须要先建立连接\r\n 2. UDP传输数据大小有限制,TCP没有，一旦连接建立起来就按统一的格式随便跑了\r\n 3. UDP传输协议不可靠，数据报顺序不唯一，还可能丢失。TCP可靠\r\n \r\n\r\n### 3.Java网络编程技术\r\n提供了用于网络通信的java.net包。包含了多种用于各种标准网络通信协议的类和接口。大致通过以下三种方式实现网络程序设计：\r\n\r\n#### a.URL编程技术\r\nURL表示Internet上的某个资源的地址，支持ftp,http,file等多种协议，通过URL标识就可以获取远端计算机上的资源。这应该就是B/S模式。浏览器/服务器模式。通常我们抓取网页就是这个实现。\r\n\r\n#### b.TCP编程技术\r\nTCP是可靠的连接通信技术，主要使用套接字（Socket)机制。Socket是TCP/IP协议中的传输层接口，**是实现C/S模式的主要方式**\r\n#### c.UDP编程技术\r\nUDP是无连接的快速通信技术，数据报是一种在网络上传播的，独立的，自包含地址的格式化信息。**主要用于传输数据量大，非关键性数据**\r\n\r\n> 有的时候真的要跳出来总结一下。。。狭义的理解通信，，。不是两个主机之间发短信，只要两者之间有信息流动就算是通信，即使有时候是单向的。单相思也是爱情，至少对于一方来说是，一个人的战斗。\r\n\r\n\r\n## 二.URL程序设计\r\njava.net中的URL类是对统一资源定位符（Uniform Resource Locator)的抽象，使用URL创建对象的程序称为客户端程序，一个URL对象存放着一个具体的资源引用，表明客户要访问的这个URL的资源，利用URL对象来访问URL中资源。\r\n**包含三部分信息：**\r\n\r\n 1. 协议\r\n 2. 地址\r\n 3. 资源\r\n \r\n\r\n### 1.URL\r\n\r\n#### a.URL格式\r\n```java\r\n传输协议名：//主机名：端口号/文件名#引用\r\n```\r\n例如合法的URL:\r\n```java\r\n\r\nhttp://java.sun.com/index.html\r\nhttp://java.sun.com/index.html#chapter1\r\nhttp://192.168.0.7:7001\r\nhttp://192.168.0.7:7001/port/index.html#myedu\r\n\r\n\r\n```\r\n#### b.URL类\r\n**常用的构造方法：**\r\n\r\n 1. `URL(String spec):`根据指定的字符串创建URL对象，如果字符串里指定了未知协议，则抛出MalfromedURLException异常\r\n 2. `URL（String protocol,String host,String file)`:根据参数构造URL\r\n 3. `URL（String protocol,String host,int port,String file)`：不解释了\r\n \r\n**常用的成员方法：**\r\n ![image_1b318pgnmek7kds1naf3ms1hrb9.png-30.2kB][1]\r\n![image_1b318qijg1h3spq61eh1oo47arm.png-46.5kB][2]\r\n\r\n\r\n实例：\r\n```java\r\n\r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic class URLTest {\r\n    public static final String URL_STRING=\"http://www.baidu.com/index.html\";\r\n    public static void main(String[] args) throws IOException {\r\n        URL url= null;\r\n        try {\r\n            url = new URL(URL_STRING);\r\n            System.out.println(\"协议：\" + url.getProtocol());\r\n            System.out.println(\"主机：\" + url.getHost());\r\n            System.out.println(\"端口：\" + url.getPort());\r\n            System.out.println(\"路径：\" + url.getPath());\r\n            System.out.println(\"文件：\" + url.getFile());\r\n            String string;\r\n            StringBuffer sb = new StringBuffer();\r\n            InputStreamReader is=new InputStreamReader(url.openStream());\r\n            BufferedReader br=new BufferedReader(is);\r\n            while((string=br.readLine())!=null){\r\n                sb.append(string);\r\n            }\r\n            System.out.println(sb.toString());\r\n        } catch (MalformedURLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n#### c.URLConnection\r\n主要用于应用程序和URL之间的连接，应用程序通过URLConnection可以获得URL对象的有关信息，是所有URL连接通信类的父类。该类的对象可以读写URL对象所代表的internet上的数据。\r\n**建立连接的步骤：**\r\n\r\n 1. 在URL上调用openConnection()方法创建连接对象\r\n 2. 处理设置参数和一般请求属性\r\n 3. 使用connect方法建立到远程对象的实际连接\r\n 4. 远程对象变为可用，远程对象的头字段和内容变为可访问\r\n\r\n**常用字段**\r\n\r\n 1. connected;表示连接状态，true表示建立了通信连接，false表示此连接对象尚未创建连接\r\n 2. url：表示此链接要在互联网上打开的远程对象\r\n\r\n\r\n\r\n**构造方法**\r\n\r\n 1. URLConnection(URL url)\r\n\r\n\r\n**主要成员方法：**\r\n\r\n 1. `Object getContent():`获取此链接的内容\r\n 2. `String getContentEncoding()`：获取资源内容编码\r\n 3. `int getContentLength()`:获取资源内容长度\r\n 4. `String getContentType()`:资源内容类型\r\n 5. `URL getURL()`:返回URLConnection的url字段的值\r\n 6. `InputStream getInputStream()`:打开连接数据的输入流\r\n 7. `OutputStream getOutputStream()`:打开链接数据的输出流\r\n 8. `public void setConnectTimeout(int timeout)`:设置超时值\r\n \r\n\r\n 实例：\r\n ```java\r\n \r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic class URLConnectionTest {\r\n    public static final String URL_STRING = \"http://www.baidu.com/index.html\";\r\n\r\n    public static void main(String[] args) {\r\n        URL url = null;\r\n        try {\r\n            url = new URL(URL_STRING);\r\n            URLConnection connection = url.openConnection();\r\n            System.out.println(\"文件类型：\" + connection.getContentType());\r\n            System.out.println(\"文件长度：\" + connection.getContentLength());\r\n            System.out.println(\"文件内容：\" + connection.getContent());\r\n            System.out.println(\"-----------------------------------------------------\");\r\n            ;\r\n            String string;\r\n            StringBuffer sb = new StringBuffer();\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));\r\n            while ((string = br.readLine()) != null) {\r\n                sb.append(string);\r\n            }\r\n            System.out.println(sb.toString());\r\n        } catch (MalformedURLException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n]s\r\n ```\r\n \r\n\r\n> 返回的文件内容并不是文件的真实内容。判断是否读完的条件为是否读到了“-1”，或者用“InputStreamReader.available()>0”来判断是否全部读完\r\n\r\n\r\n#### c.InetAddress\r\n\r\n在互联网上表示一个主机的地址有两种方式，域名地址和IP地址，InetAddress类就是用来表示主机地址的。\r\n\r\n常用成员方法：\r\n```java\r\nstatic InetAddress getByAddress(byte []addr)\r\nstatic InetAddress getByAddress(String host,byte[] addr):host可以是任何主机描述\r\nstatic InetAddress getByName(String host):给定主机名\r\nstatic InetAddress getLocalHost():返回本地主机\r\nString getHostName():返回主机名（域名）\r\nString getHostAddress():返回主机地址IP地址\r\nboolean isReachable(int timeout):测试是否可以到达\r\nString toString();主机地址的字符串表示（域名/IP)\r\nboolean isMulticastAddress();检测是否为多播地址\r\nbyte [] getAddress():返回InetAddress的原始IP\r\n\r\n```\r\n \r\n\r\n\r\n\r\n实例：\r\n```java\r\n\r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic class InetAddressTest {\r\n    public static void main(String[] args) {\r\n        try {\r\n            //获取给定域名的地址\r\n            InetAddress inetAddress1 = null;\r\n            inetAddress1 = InetAddress.getByName(\"www.baidu.com\");\r\n            System.out.println(\"-----------------------------------------------------\");\r\n\r\n            System.out.println(inetAddress1.getHostName());//显示主机名\r\n            System.out.println(inetAddress1.getHostAddress());//显示IP地址\r\n            System.out.println(inetAddress1);//显示地址的字符串描述\r\n            System.out.println(\"-----------------------------------------------------\");\r\n\r\n            //获取本机的地址\r\n            InetAddress inetAddress2 = InetAddress.getLocalHost();\r\n            System.out.println(inetAddress2.getHostName());\r\n            System.out.println(inetAddress2.getHostAddress());\r\n            System.out.println(inetAddress2);\r\n            System.out.println(\"-----------------------------------------------------\");\r\n\r\n            //获取给定IP的主机的地址（72.5.124.55\r\n            byte[] bytes = new byte[]{(byte) 72, (byte) 5, (byte) 124, (byte) 55};\r\n            InetAddress inetAddress3 = InetAddress.getByAddress(bytes);\r\n            InetAddress inetAddress4 = InetAddress.getByAddress(\"Sun 官方网站 21(java.sun.com)\", bytes);\r\n            System.out.println(inetAddress3);\r\n            System.out.println(inetAddress4);\r\n        } catch (UnknownHostException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n```\r\n  \r\n  \r\n  \r\n## 三.TCP程序设计\r\nTCP/IP套机字用于在主机和Internet之间建立可靠的，双向的，持续的，点对点的流式连接。\r\n### 1.网络套接字\r\n套接字是一个用于端点连接和数据交换的对象，一个套接字由IP地址和端口号唯一确定。网络的每一个端点都可以通过和连接绑定的套接字对象交换数据。在C/S模式下，按照套接字在网络中的作用不同，分为客户机端套接字和服务器端套接字\r\n\r\n**服务器端套接字SeverSocket**\r\n\r\n> 始终在监听是否有连接请求，有请求并且被接受，SeverSocket向客户机发回“接收”消息，两个socket之间的连接就建立了\r\n\r\n**客户端套接字Socket**\r\n\r\n> 建立一个和服务器的连接，需要知道服务器端提供的主机名和提供服务的端口号。\r\n\r\n\r\n**所以套接字关键部分就是建立连接，建立连接的过程为客户机发送请求，服务器监听到请求，接收请求后向客户机返回“接收”的消息，这个连接就建立好了，相当于是电话线扯好了大，接下来就是传送了**\r\n\r\n**数据传送工作过程的具体操作：**\r\n\r\n 1. 创建Socket对象\r\n 2. 打开连接到Socket对象的输入输出流\r\n 3. 按照一定的协议对Socket对象进行读和写操作\r\n 4. 关闭Socket对象（即关闭Socket对象绑定的连接）\r\n 5. 注意在这个过程中出现的各种异常，最最常见的就是在未启动服务器的情况下就打开客户机请求数据。\r\n \r\n\r\n\r\n### 2.Socket\r\n**常用构造方法：**\r\n```java\r\nSocket(InetAddress address,int port)\r\nScoket(String host,int port)\r\n//实例\r\nSocket mySocket=new Socket(\"218.198.118.112\",2010)\r\n```\r\n\r\n> 每一个端口提供一个特殊服务，只有正确给出端口，才能获得相应的服务。http->80,ftp->23.**0-1023是系统保留端口，自己设置端口号时，尽量大于1023的端口号**\r\n\r\n**常用的成员方法：**\r\n\r\n```java\r\n\r\nInetAddress getInetAddress():返回套接字连接的地址\r\nInetAddress getLocalAddress():获取套接字绑定的本地地址\r\nint getLocalPort();获取套接字绑定的本地端口\r\nSocketAddress getLocalSocketAddress():返回套接字绑定的端点的地址，若没有绑定返回null\r\nInputStream getInputStream():返回套接字的输入流\r\nOutputStream getOutputStream():返回套接字的输出liu\r\nint getPort():返回连接到的远程端口\r\nboolean isBound():返回绑定状态\r\nboolean isClosed():返回关闭状态\r\nboolean isConnected():返回套接字的连接状态\r\nvoid connect(SocketAddress endpoint,int timeout):链接到服务器并设置超时值\r\n```\r\n\r\n实例：\r\n```java\r\n\r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic class SocketTest {\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            Socket socket = new Socket(\"218.198.118.103\", 80);\r\n            System.out.println(\"是否绑定连接：\" + socket.isBound());\r\n            System.out.println(\"本地端口:\" + socket.getLocalPort());\r\n            System.out.println(\"连接服务器的端口：\"+socket.getPort());\r\n            System.out.println(\"连接服务器的地址:\" + socket.getInetAddress());\r\n            System.out.println(\"连接远程服务的套接字：\" + socket.getRemoteSocketAddress());\r\n            System.out.println(\"是否处于连接状态：\" + socket.isConnected());\r\n            System.out.println(\"客户套接详情：\" + socket.toString());\r\n        } catch (Exception e) {\r\n            System.out.println(\"服务器没有启动！\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### 3.SocketSever\r\n\r\n**常用构造方法：**\r\n\r\n 1. SeverSocket()\r\n 2. SeverSocket(int port)\r\n 3. SeverSocket(int port,int backlog)\r\n 4. SeverSocket(int port,int backlog,InetAddress bindAddr)\r\n \r\n其中port可以为0，表示任何空闲端口\r\nbacklog指定了服务器所能支持的最长连接队列，如果队列满了则拒绝该连接\r\nbindAddr是要将服务器绑定到的InetAddress，bindAddr参数可以在SeverSocket的多宿主主机上使用，SeverSocket仅接收对其地址之一的连接请求，如果bindAddr为null,则默认接受任何所有本地地址上的连接\r\n\r\n```java\r\nSeverSocket severSocket=new SeverSocket(2010);\r\nSeverSocket severSocket=new SeverSocket(2010,10);//端口为2010，队列最长为10\r\n```\r\n\r\n**常用成员方法**\r\n![image_1b31l4vj21p4f1fhninhjf317h89.png-12.6kB][3]\r\n\r\n\r\n实例：\r\n```java\r\n\r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic class serverSocketTest {\r\n    public static void main(String[] args) {\r\n        ServerSocket serverSocket = null;\r\n        try {\r\n            serverSocket = new ServerSocket(2010);\r\n            System.out.println(\"服务器端口：\" + serverSocket.getLocalPort());\r\n            System.out.println(\"服务器地址：\" + serverSocket.getInetAddress());\r\n            System.out.println(\"服务器套接字：\" + serverSocket.getLocalSocketAddress());\r\n            System.out.println(\"是否绑定连接：\" + serverSocket.isBound());\r\n            System.out.println(\"是否关闭：\" + serverSocket.isClosed());\r\n            System.out.println(\"服务器套接字详情：\" + serverSocket.toString());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 4.TCP编程实例\r\n\r\n**BusinessPrococal.java**\r\n```java\r\n\r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic interface BusinessProtocal {\r\n    public static final int PAY_BILL = 1;\r\n    public static final int ROAMING_SERVICE = 2;\r\n\r\n    public void paybill();\r\n\r\n    public void roamingService();\r\n}\r\n\r\n```\r\n\r\n> **接口中不仅可以放方法，还可以放字符串常量**\r\n\r\n**MobileSever.java**\r\n```java\r\n\r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic class MobileServer implements BusinessProtocal {\r\n    private ServerSocket serverSocket;\r\n    private DataInputStream in;\r\n    private DataOutputStream out;\r\n    private int serviceId;\r\n    private Socket socket;\r\n    private int fee;\r\n    private String str;\r\n\r\n    public MobileServer() {\r\n        try {\r\n            serverSocket = new ServerSocket(2010);\r\n            while (true) {\r\n                System.out.println(\"服务器准备就绪，等待客户请求。。。。\");\r\n                socket = serverSocket.accept();//堵塞状态，除非有客户呼叫\r\n                in = new DataInputStream(socket.getInputStream());\r\n                out = new DataOutputStream(socket.getOutputStream());\r\n                while (true) {\r\n                    try {\r\n                        serviceId = in.readInt();//读取放入“线路里的信息”\r\n                        switch (serviceId) {\r\n                            case PAY_BILL:\r\n                                paybill();//支付话费\r\n                                break;\r\n                            case ROAMING_SERVICE:\r\n                                roamingService();//办理漫游\r\n                            default:\r\n                                break;\r\n                        }\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"客户\" + socket.getInetAddress().getHostName() + \"业务办理完毕。已经离开了。。。。\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void paybill() {\r\n        try {\r\n            fee = in.readInt();\r\n            System.out.println(\"正在处理用户\" + socket.getInetAddress().getHostName() + \"预交饿的\" + fee + \"元话费请求！\");\r\n            System.out.println(\"交费处理完毕！\");\r\n            out.writeUTF(\"尊敬的客户，你已经成功预交了 \" + fee + \" 元话费\");\r\n            Thread.sleep(1000);\r\n            out.flush();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void roamingService() {\r\n        try {\r\n            str = in.readUTF();\r\n            System.out.println(\"正在处理用户\" + socket.getInetAddress().getHostName() + \"将手机漫游到 \" + str + \"的请求\");\r\n            out.writeUTF(\"尊敬的用户，你的手机已经漫游到\" + str + \"了\");\r\n            Thread.sleep(1000);\r\n            System.out.println(\"漫游处理完毕\");\r\n            out.flush();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        new MobileServer();\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n> **考虑为什么要使用DataInputStream和DataOutputStream？因为我们的选择模式中有数字，根据数字来判断是选择哪一项服务，只有这个流有readInt()方法，而且还能输出输入字符串。。。总结一下整个过程，首先在服务器端建立一个ServerSocket,然后设置无限循环,调用accept()方法来获取可能的请求，，accept()方法的返回结果是一个Socket。用socket打开一个输入流，打开一个输出流。socket已经建立了一个链接，我们所有的传送数据操作都应该和socket有关。从输入流读取的数据就是客户机传来的请求或者数据，往输出流写入数据就是打算向客户机返回的信息。因此输入流中点出要什么信息，就往输出流中写什么信息。一旦有请求被接收就进入处理阶段。处理的时候，先从输入流中读出一个数字判断是办理什么业务，服务器办理业务，再将业务办理的结果返回到输出流中，返回给客户机。**\r\n\r\n**MobileClient.java**\r\n```java\r\n/**\r\n * Created by XQF on 2016/12/3.\r\n */\r\npublic class MobileClient  implements BusinessProtocal{\r\n    private String string ;\r\n    private DataInputStream in;\r\n    private DataOutputStream out;\r\n    private Socket socket;\r\n    public MobileClient(){\r\n        try {\r\n            socket=new Socket(\"192.168.177.2\",2010);\r\n            in=new DataInputStream(socket.getInputStream());\r\n            out=new DataOutputStream(socket.getOutputStream());\r\n            paybill();\r\n            Thread.sleep(500);//假装很耗时\r\n            roamingService();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void paybill() {\r\n        try {\r\n            out.writeInt(PAY_BILL);\r\n            out.writeInt(200);\r\n            out.flush();//\r\n\r\n\r\n            //得到的返回 \r\n            string=in.readUTF();\r\n            System.out.println(\"来自服务员：\"+string);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void roamingService() {\r\n        try {\r\n            out.writeInt(ROAMING_SERVICE);\r\n            out.writeUTF(\"香港\");\r\n            out.flush();\r\n// 得到的返回\r\n            string=in.readUTF();\r\n            System.out.println(\"来自服务员：\"+string);\r\n            \r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        new MobileClient();\r\n    }\r\n}\r\n\r\n```\r\n\r\n> **要总结的就是客户机和服务器都是要一个输出流一个输入流的，这里的代码设计很是喜欢。还有就是见识到了接口的魅力。不仅充当了Config的角色（提供常量字符串），还增加了代码的紧凑性，看上去是环环相扣的，也是多态的魅力。接口的不同实现，使得代码变得如此的好懂，联系也强，佩服。还有就是输出流要刷新flush一下。再来解释一下DataInputStream，感觉也只是适合数据量少且类型多样的数据传送。服务器的监听一定要处于无限循环中**\r\n\r\n## 四.UDP程序设计\r\nUDP是一种无连接的网络通信机制，更像是邮件和发短信的通信方式\r\n### 1.数据报通信\r\n数据报是指起始点和目的地都能使用无连接网络服务的网络层的信息单元。UDP不可靠但是快速，因此在海量数据但是不精密的传送服务中占有重要地位，比如看个视频，视频在路上丢了几帧好像并没有什么大碍。\r\nJava通过两个类实现UDP协议顶层的数据报，一个是**DatsgramPackets**,对象是数据容器，**DatagramSocket**是用来发送和接收DatagramPackets的套接字。采用UDP通信时，首先将要传输的数据打包，将打包好的数据传送给目的地。目的地接收数据包，然后查看数据包中的内容。\r\n\r\n### 2.DatagramPacket\r\n要发送或者接收数据包，需要用DatagramPacket将数据内容打包，即用DatagramPacket创建一个对象，称为数据包。\r\n#### a.构造方法\r\n![image_1b31skmjvrpp1omihq2bph1g58m.png-35.7kB][4]\r\n#### b.常用方法\r\n![image_1b31sn21i11cdk2s1l25s1fi4n13.png-45kB][5]\r\n\r\n### 3.DatagramSocket\r\nDatagramSocket是用来发送和接收数据包的套接字，负责将数据包发送到目的地，或从目的地接收数据包。\r\n  \r\n#### a.构造方法\r\n![image_1b31svvivdk3ve81ine1bqbkjs1g.png-27.9kB][6]\r\n\r\n#### b.常用方法\r\n\r\n#### c.总结\r\n简单实例（将“你好”打包并发送）：\r\n```java\r\nbyte[] buff=\"你好\".getBytes();\r\nInetAddress inetAddress=InetAddress.getByName(\"192.168.0.107\");//I地址和域名都可以\r\nDatagramPocket dataPacket=new DatagramPocket(buff,buff.length,inetAddress,2018);\r\nDatagramSocket sendSocket=new DatagramSocket();\r\nsendSocket.send(dataPacket);\r\n```\r\n\r\n简单实例（取出外界发送给2018端口的数据包中的内容）：\r\n```java\r\n\r\nbyte []buff=new byte[8192];\r\nDatagramPocket receivePacket=new DatagramPocket(buff,buff.length);\r\nDatagramSocket receiveSocket=new DatagramSocket(2018);\r\nreceiveSocket.receive(receivePacket);\r\nint length=receivePacket.getLength();\r\nString message=new String(receivePacket.getData(),0,length);\r\nSystem.out.println(message);\r\n```\r\n\r\n\r\n\r\n### 4.UDP编程实例\r\n\r\n#### a.UDPCollection.java\r\n两个主机的界面几乎是一样的，设置为公共代码复用。这就是核心代码了\r\n```java\r\n\r\n/**\r\n * Created by XQF on 2016/12/4.\r\n */\r\npublic class UDPCollection extends JFrame implements Runnable, ActionListener {\r\n    private JTextField sendMsg;//信息内容文本框\r\n    private JTextArea receivedMsg;//接收消息显示区\r\n    private JButton sendBtn;\r\n    private Container container;\r\n    private Model model;\r\n\r\n\r\n    private String titleString;\r\n    private int inPort;\r\n    private int outPort;\r\n\r\n    public UDPCollection(Model model) {\r\n        this.model = model;\r\n        container = this.getContentPane();\r\n        this.setSize(400, 300);\r\n        this.setVisible(true);\r\n        this.setTitle(model.getTitleString());\r\n        container.setLayout(new BorderLayout());//给顶层容器的默认布局换成BorderLayout布局,不过顶层容器的默认布局就是这个呀，简直多此一举\r\n\r\n\r\n// 添加滑动面板，也就是中间的消息界面\r\n        JScrollPane centerPanel = new JScrollPane();//新建滑动面板对象\r\n        receivedMsg = new JTextArea();\r\n        centerPanel.setViewportView(receivedMsg);//把文本编辑区放进滚动面板\r\n        // JScrollPanel centerPanel=new JScrollPanel(receivedMsg)\r\n        container.add(centerPanel, BorderLayout.CENTER);//把滚动面板放在窗口最中间\r\n\r\n// 添加底部面板，也就是编辑消息和发送消息按钮的面板\r\n        JPanel bottomPanel = new JPanel();\r\n        JLabel label = new JLabel(\"编辑信息\");//创建一个标签提示栏对象\r\n        sendMsg = new JTextField(20);//创建一个文本编辑框用于编辑消息，大小为20为列数，。大概也是指的宽度了。\r\n        sendBtn = new JButton(\"发送消息\");\r\n        bottomPanel.add(label);\r\n        bottomPanel.add(sendMsg);\r\n        bottomPanel.add(sendBtn);\r\n        container.add(bottomPanel, BorderLayout.SOUTH);\r\n\r\n//下面对事件进行处理\r\n\r\n        sendBtn.addActionListener(this);//注册点击按钮事件\r\n        sendMsg.addActionListener(this);//注册聊天栏动作事件\r\n\r\n// 新开一个线程用于接收数据\r\n        Thread t = new Thread(this);//因为实现了runable接口\r\n        t.start();\r\n//点击退出就退出\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n    }\r\n\r\n\r\n    //点击事件处理\r\n    public void actionPerformed(ActionEvent event) {\r\n        byte[] buffer = sendMsg.getText().trim().getBytes();\r\n        InetAddress destAddress = null;//先拿到一个主机地址，创建一个InetAddress对象，这个对象在后续创建DatagramPacket有用\r\n        try {\r\n            destAddress = InetAddress.getByName(\"127.0.0.1\");\r\n        } catch (UnknownHostException e) {\r\n            System.out.println(\"找不到主机！\" + e.getMessage());\r\n        }\r\n\r\n        //构造数据包一直都在用这个方法，相对来说简单，把端口，大小什么的都说明了,\r\n        //将buff.length()大小的数据buff发送到目的地址为destAddress的2012端口处\r\n        DatagramPacket dataPacket = new DatagramPacket(buffer, buffer.length, destAddress, model.getOutPort());\r\n\r\n        //创建套接字对象，准备打开管子放水了,这个类的构造方法还是比价简单，此时是发送就不需要绑定端口，所以使用这种构造方法\r\n        DatagramSocket sendSocket = null;\r\n        try {\r\n            sendSocket = new DatagramSocket();\r\n        } catch (SocketException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"套接字创建错误！\");\r\n        }\r\n\r\n//        receivedMsg.append(\"==================本地消息==================\\n\");\r\n//        receivedMsg.append(\"数据报目标主机地址：\" + dataPacket.getAddress() + \"\\n\");//为了显摆一下在数据包里进行操作，InetAddress对象也可以获得。\r\n//        receivedMsg.append(\"数据报目标端口：\" + dataPacket.getPort() + \"\\n\");\r\n//        receivedMsg.append(\"数据报长度：\" + dataPacket.getLength() + \"\\n\");\r\n\r\n        receivedMsg.append(model.getTitleString()+\"发出：\"+sendMsg.getText().trim()+\"\\n\");\r\n        //发送数据报\r\n        try {\r\n            sendSocket.send(dataPacket);\r\n        } catch (IOException e) {\r\n            System.out.println(\"数据报发送错误！\");\r\n        }\r\n\r\n\r\n        //将消息编辑界面置空，看上去是不见了\r\n        sendMsg.setText(\"\");\r\n    }\r\n\r\n\r\n    //子线程要干的事情,接收数据\r\n    public void run() {\r\n        DatagramPacket receivedPacket = null;\r\n        DatagramSocket receivedSocket = null;\r\n        byte[] buffer = new byte[8192];\r\n\r\n        try {\r\n\r\n            //发送的时候使用四个参数的构造方法，接收的时候使用两个参数的构造方法\r\n            receivedPacket = new DatagramPacket(buffer, buffer.length);\r\n            //接收的Socket与端口绑定，就是为了接收这个端口的数据\r\n            receivedSocket = new DatagramSocket(model.getInPort());\r\n        } catch (SocketException e) {\r\n            e.printStackTrace();\r\n        }\r\n        while (true) {\r\n            //如果套接字为空就跳出死循环,这里很奇怪，既然套接字里面都不为空了为什么在后面才来获取数据包\r\n            if (receivedSocket == null) {\r\n                break;\r\n            } else {\r\n                try {\r\n                    receivedSocket.receive(receivedPacket);//接收数据，这句过后receivedPacket就不是空的了\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                int length = receivedPacket.getLength();//获取内容长度只能在数据包里获取，不能在套接字，。，。套接字只是一条路。\r\n                InetAddress address = receivedPacket.getAddress();//拿到此套接字连接的地址，即获取发送人的地址\r\n                int port = receivedSocket.getPort();//获取发送者发送数据的端口号\r\n\r\n                //将获取到的数据转换为字符串\r\n                String message = new String(receivedPacket.getData(), 0, length);//查了一下API文档，里面的String真的有这个构造方法\r\n//                receivedMsg.append(\"==================异地消息==================\");\r\n//                receivedMsg.append(\"收到数据长度：\" + length + \"\\n\");\r\n//                receivedMsg.append(\"收到数据来自：\" + address + \" 端口：\" + port + \"\\n\");\r\n//                receivedMsg.append(\"收到数据是：\" + message + \"\\n\");\r\n                receivedMsg.append(model.getTitleString() + \"收到：\" + message+\"\\n\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n  [1]: http://static.zybuluo.com/XQF/nglnxi53v3llyyfgazh2zcy4/image_1b318pgnmek7kds1naf3ms1hrb9.png\r\n  [2]: http://static.zybuluo.com/XQF/u33xt05528oqddc8ugscim4r/image_1b318qijg1h3spq61eh1oo47arm.png\r\n  [3]: http://static.zybuluo.com/XQF/k8kn8jr6vm1d8lnwvorbkwh3/image_1b31l4vj21p4f1fhninhjf317h89.png\r\n  [4]: http://static.zybuluo.com/XQF/wheow3hexy89d10opna0m7e7/image_1b31skmjvrpp1omihq2bph1g58m.png\r\n  [5]: http://static.zybuluo.com/XQF/rftmsqvj92khek776jt46g6e/image_1b31sn21i11cdk2s1l25s1fi4n13.png\r\n  [6]: http://static.zybuluo.com/XQF/g9xiwxk52ecvku6q8zsgsc0r/image_1b31svvivdk3ve81ine1bqbkjs1g.png",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}